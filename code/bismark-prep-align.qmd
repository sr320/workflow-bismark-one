---
title: "Bismark Genome Prep and Alignment"
format: html
editor: visual
---

## Set variables

```{bash}
# User-configurable variables

# Paths to programs (leave empty to use those on PATH)
bismark_dir=""
bowtie2_dir=""

# Number of threads to use
threads=10

# Genome source: set a local folder OR a local file OR an HTTP(S) URL to a .fa/.fna[.gz]
genome_path_or_url="https://gannet.fish.washington.edu/v1_web/owlshell/bu-github/project-cod-temperature/data/GCF_031168955.1_ASM3116895v1_genomic.fna"

# Reads source: EITHER set a local directory containing pairs named *_R1.fastq[.gz] and *_R2.fastq[.gz]
# OR provide URLs for ONE paired sample (both URLs must be set)
reads_dir="../data/reads/"
reads_r1_url="https://owl.fish.washington.edu/nightingales/G_macrocephalus/30-1067895835/1D11_R1_001.fastq.gz"
reads_r2_url="https://owl.fish.washington.edu/nightingales/G_macrocephalus/30-1067895835/1D11_R2_001.fastq.gz"

# Output directory
output_dir="../output/bismark-prep-align-laptop"

# Ensure base directories exist
 mkdir -p "${output_dir}"

# Resolve absolute genome path to avoid cwd issues
genome_abs="${genome_folder}"
if [[ -d "${genome_folder}" ]]; then
  genome_abs="$(cd "${genome_folder}" && pwd)"
fi

echo "Genome folder (absolute): ${genome_abs}"
echo "Genome FASTA files present:" && ls -1 "${genome_abs}"/*.fa "${genome_abs}"/*.fasta 2>/dev/null || true
mkdir -p ../data

# Persist configuration for later chunks
cat > .bismark_env.sh <<EOF
export bismark_dir="${bismark_dir}"
export bowtie2_dir="${bowtie2_dir}"
export threads="${threads}"
export genome_path_or_url="${genome_path_or_url}"
export reads_dir="${reads_dir}"
export reads_r1_url="${reads_r1_url}"
export reads_r2_url="${reads_r2_url}"
export output_dir="${output_dir}"
EOF
echo "Wrote config to .bismark_env.sh"
```

## Prepare genome folder

```{bash}
set -euo pipefail

if [[ -f ./.bismark_env.sh ]]; then
  source ./.bismark_env.sh
else
  echo "Config file .bismark_env.sh not found. Run the 'Set variables' chunk first." >&2
  exit 1
fi

genome_folder=""

if [[ "${genome_path_or_url}" =~ ^https?:// ]]; then
  mkdir -p ../data/genome
  cd ../data/genome
  url="${genome_path_or_url}"
  fname=$(basename "${url}")
  echo "Downloading genome: ${url}"
  curl -L -O "${url}"
  if [[ "${fname}" == *.gz ]]; then
    gunzip -f "${fname}"
    fname="${fname%.gz}"
  fi
  genome_folder="$(pwd)"
  cd - >/dev/null
elif [[ -d "${genome_path_or_url}" ]]; then
  genome_folder="${genome_path_or_url%/}"
elif [[ -f "${genome_path_or_url}" ]]; then
  mkdir -p ../data/genome
  cp -f "${genome_path_or_url}" ../data/genome/
  if [[ "${genome_path_or_url}" == *.gz ]]; then
    gunzip -f ../data/genome/$(basename "${genome_path_or_url}")
  fi
  genome_folder="../data/genome"
else
  echo "Genome source not found: ${genome_path_or_url}" >&2
  exit 1
fi

echo "Genome folder: ${genome_folder}"
echo "export genome_folder=\"${genome_folder}\"" >> .bismark_env.sh
 
# Ensure genome FASTA is accessible as .fa/.fasta (Bismark discovery)
# Decompress any .gz FASTA files
if compgen -G "${genome_folder}"/*.fa.gz > /dev/null || compgen -G "${genome_folder}"/*.fasta.gz > /dev/null || compgen -G "${genome_folder}"/*.fna.gz > /dev/null; then
  gunzip -f "${genome_folder}"/*.fa.gz 2>/dev/null || true
  gunzip -f "${genome_folder}"/*.fasta.gz 2>/dev/null || true
  gunzip -f "${genome_folder}"/*.fna.gz 2>/dev/null || true
fi

# If only .fna exists, symlink to .fa so Bismark can find it
if ! compgen -G "${genome_folder}"/*.fa > /dev/null && ! compgen -G "${genome_folder}"/*.fasta > /dev/null; then
  if compgen -G "${genome_folder}"/*.fna > /dev/null; then
    for f in "${genome_folder}"/*.fna; do
      base="$(basename "${f%.fna}")"
      ln -sf "${f}" "${genome_folder}/${base}.fa"
    done
  fi
fi
```

## Build Bismark genome index

```{bash}
set -euo pipefail

if [[ -f ./.bismark_env.sh ]]; then
  source ./.bismark_env.sh
else
  echo "Config file .bismark_env.sh not found. Run the 'Set variables' chunk first." >&2
  exit 1
fi

prep_cmd="bismark_genome_preparation"
if [[ -n "${bismark_dir}" ]]; then
  prep_cmd="${bismark_dir%/}/bismark_genome_preparation"
fi

if [[ -n "${bowtie2_dir}" ]]; then
  "${prep_cmd}" \
    --verbose \
    --parallel "${threads}" \
    --path_to_aligner "${bowtie2_dir%/}" \
    "${genome_folder}"
else
  "${prep_cmd}" \
    --verbose \
    --parallel "${threads}" \
    "${genome_folder}"
fi
```

## Acquire reads (optional URLs)

```{bash}
set -euo pipefail

if [[ -f ./.bismark_env.sh ]]; then
  source ./.bismark_env.sh
else
  echo "Config file .bismark_env.sh not found. Run the 'Set variables' chunk first." >&2
  exit 1
fi

effective_reads_dir="${reads_dir}"

if [[ -n "${reads_r1_url}" && -n "${reads_r2_url}" ]]; then
  mkdir -p "${reads_dir}"
  cd "${reads_dir}"
  r1_name=$(basename "${reads_r1_url}")
  r2_name=$(basename "${reads_r2_url}")
  if [[ -f "${r1_name}" ]]; then
    echo "R1 already exists, skipping download: ${r1_name}"
  else
    echo "Downloading R1: ${reads_r1_url}"
    curl -L -O "${reads_r1_url}"
  fi
  if [[ -f "${r2_name}" ]]; then
    echo "R2 already exists, skipping download: ${r2_name}"
  else
    echo "Downloading R2: ${reads_r2_url}"
    curl -L -O "${reads_r2_url}"
  fi
  effective_reads_dir="$(pwd)/"
  cd - >/dev/null
fi

echo "Using reads directory: ${effective_reads_dir}"
echo "export effective_reads_dir=\"${effective_reads_dir}\"" >> .bismark_env.sh
```

## Align reads

```{bash}
# Minimal Bismark alignment (single pair)

# User: set this to your R1 FASTQ path
reads="../data/reads"

# Optional: override these if needed
genome_dir="${genome_dir:-../data/genome}"
threads="${threads:-8}"
bismark_cmd="${bismark_cmd:-/opt/bismark/bismark}"

# Derive R1/R2 from reads
r1="${reads}"
r2="${reads/_R1/_R2}"

echo "Aligning single pair"
if ! command -v "${bismark_cmd}" >/dev/null 2>&1; then
  echo "bismark not found. Set bismark_cmd to full path, e.g., /usr/local/bin/bismark" >&2
  exit 127
fi
"${bismark_cmd}" -genome "${genome_dir}" -p "${threads}" -1 "${r1}" -2 "${r2}"
```

```
# Set variables
reads="/work/data/reads/1D11_R1_001.fastq.gz"     # R1 file path inside the container
genome_dir="/work/data/genome"               # folder with prepared genome (inside container)
threads=12
bismark_cmd="/opt/bismark/bismark"

# Run single-pair alignment
"$bismark_cmd" \
-genome "$genome_dir" \
-p "$threads" \
-score_min L,0,-0.6 \
--non_directional \
-1 "$reads" \
-2 "${reads/_R1/_R2}"
```


```
find ${reads_dir}*_R1_001_val_1.fq.gz \
| xargs basename -s _R1_001_val_1.fq.gz | xargs -I{} ${bismark_dir}/bismark \
--path_to_bowtie ${bowtie2_dir} \
-genome ${genome_folder} \
-p 4 \
-score_min L,0,-0.6 \
--non_directional \
-1 ${reads_dir}{}_R1_001_val_1.fq.gz \
-2 ${reads_dir}{}_R2_001_val_2.fq.gz \
-o Mcap_tg
```
